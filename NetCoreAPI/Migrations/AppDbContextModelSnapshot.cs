// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using NetCoreAPI.Data;
using System;

namespace NetCoreAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NetCoreAPI.Data.Model.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<string>("AccessCode");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Deleted");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("StorageUrl");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("NetCoreAPI.Data.Model.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Deleted");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("NetCoreAPI.Data.Model.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Action");

                    b.Property<string>("AttachImage");

                    b.Property<int>("ChannelId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Deleted");

                    b.Property<string>("Location");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("NetCoreAPI.Data.Model.Spam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CommentId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Deleted");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Spams");
                });

            modelBuilder.Entity("NetCoreAPI.Data.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("DomainUrl");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NetCoreAPI.Data.Model.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Deleted");

                    b.Property<int>("FeedbackId");

                    b.Property<string>("UserId");

                    b.Property<int>("VoteStatus");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("NetCoreAPI.Data.Model.Channel", b =>
                {
                    b.HasOne("NetCoreAPI.Data.Model.User", "User")
                        .WithMany("Channels")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("NetCoreAPI.Data.Model.Comment", b =>
                {
                    b.HasOne("NetCoreAPI.Data.Model.Feedback", "Feedback")
                        .WithMany("Comments")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NetCoreAPI.Data.Model.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("NetCoreAPI.Data.Model.Feedback", b =>
                {
                    b.HasOne("NetCoreAPI.Data.Model.Channel", "Channel")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NetCoreAPI.Data.Model.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("NetCoreAPI.Data.Model.Spam", b =>
                {
                    b.HasOne("NetCoreAPI.Data.Model.Comment", "Comment")
                        .WithMany("Spams")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NetCoreAPI.Data.Model.User", "User")
                        .WithMany("Spams")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("NetCoreAPI.Data.Model.Vote", b =>
                {
                    b.HasOne("NetCoreAPI.Data.Model.Feedback", "Feedback")
                        .WithMany("Votes")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NetCoreAPI.Data.Model.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
